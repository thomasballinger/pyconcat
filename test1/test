#Generated by concat.py
import imp
import sys

def create_module(): # just for the scope barrier
    MODULE = imp.new_module('helper4')
    __name__ = 'helper4'
    asdf = 4

    for k, v in locals().items():
        setattr(MODULE, k, v)
    return MODULE
sys.modules['helper4'] = create_module()
del create_module

def create_module(): # just for the scope barrier
    MODULE = imp.new_module('helper3')
    __name__ = 'helper3'
    import helper4
    import time
    b = 3245

    for k, v in locals().items():
        setattr(MODULE, k, v)
    return MODULE
sys.modules['helper3'] = create_module()
del create_module

def create_module(): # just for the scope barrier
    MODULE = imp.new_module('helper2')
    __name__ = 'helper2'
    import helper3
    import helper4
    def bar(x):
        return helper3.b

    a = 4

    for k, v in locals().items():
        setattr(MODULE, k, v)
    return MODULE
sys.modules['helper2'] = create_module()
del create_module

def create_module(): # just for the scope barrier
    MODULE = imp.new_module('helper1')
    __name__ = 'helper1'
    def foo(x):
        return 2

    if __name__ == '__main__':
        print foo(4)


    for k, v in locals().items():
        setattr(MODULE, k, v)
    return MODULE
sys.modules['helper1'] = create_module()
del create_module
#main file
import helper1
import helper2 as my_helper
import sys
import datetime
from helper1 import foo

print foo(1)
