#Generated by concat.py
import imp
import sys

# code for module helpers.helpererror
def create_module(): # just for the scope barrier
    import sys, imp
    MODULE = imp.new_module('helpers.helpererror')
    sys.modules['helpers.helpererror'] = MODULE

    __name__ = 'helpers.helpererror'
    # code from module
    print 'HelperError being imported'
    class HelperError(Exception):
        pass

    # autogenerated export and cleanup
    for k, v in locals().items():
        setattr(MODULE, k, v)
    return True
create_module()
del create_module

# code for module helpers
def create_module(): # just for the scope barrier
    import sys, imp
    MODULE = imp.new_module('helpers')
    sys.modules['helpers'] = MODULE
    MODULE.helpererror = sys.modules["helpers.helpererror"]
    __name__ = 'helpers'
    # code from module
    print 'running init now'
    import sys
    print sys.modules.keys()
    print 'importing HelperError'
    from .helpererror import HelperError
    HelperError
    print sys.modules.keys()
    print 'done importing HelperError'

    print 'name in an __init__.py:', __name__
    print 'path on an __init__.py:', __path__

    def foo(x):
        return x

    # autogenerated export and cleanup
    for k, v in locals().items():
        setattr(MODULE, k, v)
    return True
create_module()
del create_module

#main file
import helpers

helpers.foo(1)
